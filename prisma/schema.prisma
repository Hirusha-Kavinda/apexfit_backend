generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum MeetingStatus {
  pending
  cancel
  complete
}

enum ExercisePlanStatus {
  active
  inactive
}

enum UserDetailsStatus {
  current
  past
}

enum ExerciseTrackingStatus {
  complete
  lost
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String    @default("")
  lastName  String    @default("")
  birthday  String
  email     String    @unique(map: "User_email_key")
  password  String
  role      String    @default("USER")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  meetings  Meeting[] @relation("UserMeetings")

  userDetails      userDetails[]
  ExercisePlan     ExercisePlan[]
  ExerciseTracking ExerciseTracking[]
  DayTracker       DayTracker[]
}

model Meeting {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation("UserMeetings", fields: [userId], references: [id])
  title       String
  description String?
  date        DateTime
  startTime   String
  endTime     String
  status      MeetingStatus @default(pending)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model userDetails {
  id               Int               @id @default(autoincrement())
  age              Int
  height           Int
  weight           Int
  daysPerWeek      Int
  gender           String
  fitnessLevel     String
  medicalCondition String
  goal             String
  status           UserDetailsStatus @default(current)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Foreign Key
  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model ExercisePlan {
  id          Int                @id @default(autoincrement())
  day         String
  name        String
  sets        Int
  reps        String
  duration    String
  status      ExercisePlanStatus @default(active)
  planVersion Int                @default(1)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  userId           Int
  user             User               @relation(fields: [userId], references: [id])
  ExerciseTracking ExerciseTracking[]
  DayTracker       DayTracker[]
}

model ExerciseTracking {
  id             Int                    @id @default(autoincrement())
  userId         Int
  exercisePlanId Int
  day            String
  weekStartDate  DateTime
  status         ExerciseTrackingStatus @default(lost)
  completedAt    DateTime?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  exercisePlan ExercisePlan @relation(fields: [exercisePlanId], references: [id])

  @@unique([userId, exercisePlanId, day, weekStartDate])
}

model DayTracker {
  id             Int      @id @default(autoincrement())
  dayInWeek      String // monday, tuesday, wednesday, etc.
  exercisePlanId Int
  userId         Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  exercisePlan ExercisePlan @relation(fields: [exercisePlanId], references: [id])

  @@unique([userId, exercisePlanId, dayInWeek])
}
